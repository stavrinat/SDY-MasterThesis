#!/usr/bin/env python
# coding: utf-8

# In[ ]:


#!/usr/bin/env python
# coding: utf-8

# In[9]:
# https://github.com/eellak/gsoc2018-spacy/blob/dev/spacy/lang/el/res/modules/emotions.py
# https://github.com/MKLab-ITI/greek-sentiment-lexicon
# we used code from the above links (references to Giannis Daras for part of the sentiment_analysis_process) and also added some prototype of our own
#The lexicon was generated by Adam Tsakalidis (CERTH-ITI, now University of Warwick) in collaboration with Symeon Papadopoulos #(CERTH-ITI) and with the contribution of Ourania Voskaki (Centre for Greek Language) and Kyriaki Ioannidou (Centre for Greek #Language) and Christina Boididou (CERTH-ITI). For feedback and suggestions, please get in touch with adam.tsakalidis@gmail.com #and papadop@iti.gr.


import spacy
import operator
import pandas as pd
import tiger_manage_tokens as tmt
from collections import defaultdict
from spacy import displacy
from spacy.lang.el import Greek

nlpGR = Greek()

subj_scores = {
    'OBJ': 0,
    'SUBJ-': 0.5,
    'SUBJ+': 1,
}

emotion_scores = {
    'N/A': 0,
    '1.0': 0.2,
    '2.0': 0.4,
    '3.0': 0.6,
    '4.0': 0.8,
    '5.0': 1,
}

polarity_scores = {
    'N/A': 0,
    'BOTH': 0,
    'NEG': -1,
    'POS': 1
}


def sentiment_analysis_process(doc):
    # 1. load greek sentiment lexicon
    indexes = {}
    df = pd.read_csv('greek_sentiment_lexicon.tsv',sep='\t')
    df = df.fillna('N/A')
    for index, row in df.iterrows():
        df.at[index, 'Term'] = row['Term'].split(' ')[0]
        indexes[df.at[index, "Term"]] = index
    #print(type(indexes))
    
    # 2. initialize variables that keep emotions scores to 0
    subjectivity_score = 0
    anger_score = 0
    disgust_score = 0
    fear_score =  0
    happiness_score = 0
    sadness_score = 0
    surprise_score = 0
    matched_tokens = 0

    # 3. search for tokens that are included in greek sentiment lexicon
    # and are expressing an emotion
    for token in doc:
        # 3.1 search if token is include in greek sentiment lexicon
        # find_similar() examines all possible terms in the lexicon
        # to find if there is an identical term or a term with the same stem
        indx = tmt.find_similar(token,indexes)
        
        # 3.2 if token is include (or is similar with a term in greek sentiment lexicon
        # we proceed with the next steps of sentiment analysis
        if (indx != 0):
            print(token,indx,tmt.get_key(indx,indexes),token.pos_)
            pos_flag = False
            for col in ["POS1", "POS2", "POS3", "POS4"]:
                if (token.pos_ == df.at[indx,col]):
                    pos_flag = True
                    break
                    
            # 3.3 find emotions scores
            if (pos_flag == True):
                match_col_index = [int(s) for s in col if s.isdigit()][0]
                subjectivity_score += subj_scores[df.at[indx,'Subjectivity'+str(match_col_index)]]
                anger_score += emotion_scores[str(df.at[indx, 'Anger'+str(match_col_index)])]
                disgust_score += emotion_scores[str(df.at[indx, 'Disgust'+str(match_col_index)])]
                fear_score += emotion_scores[str(df.at[indx, 'Fear'+str(match_col_index)])]
                happiness_score += emotion_scores[str(df.at[indx, 'Happiness'+str(match_col_index)])]
                sadness_score += emotion_scores[str(df.at[indx,'Sadness'+str(match_col_index)])]
                surprise_score += emotion_scores[str(df.at[indx, 'Surprise'+str(match_col_index)])]
                matched_tokens+=1

    # 3.4 return emotions
    try:
        print('Subjectivity: ' + str(subjectivity_score/matched_tokens * 100)+'%')
        emotions = {'anger': (anger_score/matched_tokens * 100), 'disgust': (disgust_score/matched_tokens * 100), 'fear':(fear_score/matched_tokens * 100), 'happiness':(happiness_score/matched_tokens * 100), 'sadness': (sadness_score/matched_tokens * 100), 'surprise': (surprise_score/matched_tokens * 100)}
        emotion = max(emotions.items(), key=operator.itemgetter(1))[0]
        if (emotions[emotion] == 0):
            print('Unable to detect emotion')
        else:
            print('Main emotion: ' + emotion + '. Emotion score: ' + str(emotions[emotion]*100/matched_tokens) + '%')
    except:
        print('No matched tokens')

    return emotions






